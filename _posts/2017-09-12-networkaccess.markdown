---
layout:     post
title:      "TCP/IP 小白入门"
subtitle:   "访问一个网站，到底经历了什么"
date:       2017-09-13 
header-img: "img/networkaccess-bg.jpg"
catalog:    true
author:     "Neil"
tags:
    - TCP/IP
    - 网络编程
---  

## 写在前面的话  
　　前段时间恶补各种技术架构，最终成功把自己看吐，笔记也整理了一半搁浅了，遂换了个口味继续研究Python，换换脑子还是不错的，在看Socket编程的时候发现学Java时没有仔细研究的部分在python这里补回来了，感觉就像来了一瓶开塞露...  
　　三次握手，四次挥手都被说烂，但这具体有哪些细节对于网络底层又了解多少呢。本文重点是分析访问google到底经历了什么，顺便讲讲HUB，switch，Router  
本文用到的软件：开始想用wireshark 用来抓包发现模拟起来贼困难，所以这里使用的是思科大佬的`Cisco Packet Tracer` 研究网络的神器。理解了这些再去刷《TCP/IP详解 卷一》会轻松很多。
![img](/img/blogarticles/networkaccess/tracer.png)  

## 概念性的东西
#### 网络模型  
关于网络模型如下图所示：
![img](/img/blogarticles/networkaccess/model.png)  
这里简单说一下各个层的作用  
应用层：解决要传递什么数据   
传输层：解决如何传输数据  
网络层：传输到哪里  
链路层：具体传输工具  
#### IP Address
打开Cisco Packet Tracer 添加两台电脑并设置网卡参数  
![img](/img/blogarticles/networkaccess/two.png)  
首先红框内`DHCP(动态主机配置协议)`就是用来分配动态IP的，这里我们先看IP Address  
![img](/img/blogarticles/networkaccess/guide.png)  
- A 类IP地址  
⼀个A类IP地址由1字节的⽹络地址和3字节主机地址组成， ⽹络地址的最⾼位必须是“0”，地址范围`1.0.0.1-126.255.255.254`，可⽤的A类⽹络有`126`个， 每个⽹络能容纳`1677214`个主机
- B 类IP地址  
⼀个B类IP地址由2个字节的⽹络地址和2个字节的主机地址组成， ⽹络地址的最⾼位必须是“10”，地址范围`128.1.0.1-191.255.255.254`，可⽤的B类⽹络有`16384`个， 每个⽹络能容纳`65534`主机
- C类IP地址  
⼀个C类IP地址由3字节的⽹络地址和1字节的主机地址组成， ⽹络地址的最⾼位必须是“110” 范围`192.0.1.1-223.255.255.254`，C类⽹络可达`2097152`个， 每个⽹络能容纳`254`个主机
- D类地址  
D类IP地址第⼀个字节以“1110”开始， 它是⼀个专⻔保留的地址。它并不指向特定的⽹络， ⽬前这⼀类地址被⽤在多点⼴播（Multicast） 中，多点⼴播地址⽤来⼀次寻址⼀组计算机地址范围`224.0.0.1-239.255.255.254`
- E类地址  
一般见不到仅作实验和开发用

在这么多⽹络IP中， 国际规定有⼀部分IP地址是⽤于我们的局域⽹使⽤， 也就是属于私⽹IP， 不在公⽹中使⽤的， 它们的范围是：
```
10.0.0.0～10.255.255.255
172.16.0.0～172.31.255.255
192.168.0.0～192.168.255.255
```

#### SubnetMask 
　　再来看看子网掩码，由上面可以发现IP地址是由网络号和主机号组成的，那我拿到一个IP地址怎么确定网络号呢，这里就用到了子网掩码。
⼦⽹掩码只有⼀个作⽤， 就是将某个IP地址划分成⽹络地址和主机地址两部  
　　与IP地址相同， ⼦⽹掩码的⻓度也是32位，左边是⽹络位， ⽤⼆进制数字“1”表示；右边是主机位， ⽤⼆进制数字“0”表示。  
假设IP地址为`192.168.1.1`⼦⽹掩码为`255.255.255.0`。说白了就是为了得到网络码IP地址与子网掩码进行`按位与`操作后得到`192.168.1.0`这正是网络号。
![img](/img/blogarticles/networkaccess/subnetmask .png)  


## 网络设备
两台计算机想要组成局域网只需一根网线就好，那三台电脑想要组成局域网呢？就需要借助网络设备
#### 集线器（HUB） AND 交换机（SWITCH）
![img](/img/blogarticles/networkaccess/hub-switch.png)  

> 集线器(hub) 

　　是指将多条以太网双绞线或光纤集合连接在同一段物理介质下的设备。集线器是运作在OSI模型中的物理层 这是WIKI百科的解释、
简单来说其实`就是类似可以将一个USB接口扩展为多个USB口的USB集线器`。

> 交换机(switch) 

　　右边的是交换机(switch)扩⼤⽹络的器材， 能为⼦⽹络中提供更多的连接端⼝， 以便连接更多的计算机，具有以下特点：
- 转发过滤 
当⼀个数据帧的⽬的地址在MAC地址表中有映射时， 它被转发到连接⽬的节点的端⼝⽽不是所有端⼝（如该数据帧为⼴播帧则转发⾄所有端⼝）
- 学习功能
以太⽹交换机了解每⼀端⼝相连设备的MAC地址， 并将地址同相应的端⼝映射起来存放在交换机缓存中的MAC地址表中

> 区别  

　　集线器能够完成多个电脑的链接，每个数据包的发送都是以⼴播的形式进⾏的， 容易堵塞⽹络  
交换机在第⼀次收到ARP⼴播数据， 会把ARP⼴播数据包转发给所有端⼝（除来源端⼝） ； 如果以后还有pc询问此IP的MAC， 那么只是向⽬标的端⼝进⾏转发数据

## ARP（Address Resolution Protocol ）
　　通过arp –a　可以查看ARP缓存表，用来记录IP所对应的MAC， 当我们去ping的时候使用的就是ICMP协议，当我去第一次ping其他电脑的时候这时我并不知道其他电脑的MAC地址，所以要发一个ARP（地址解析协议）来获取IP所对应的MAC地址  
![img](/img/blogarticles/networkaccess/arp-a.png)   
- Ping 命令使用的是ICMP协议，首先需要发送ARP包确定目标IP的MAC地址
![img](/img/blogarticles/networkaccess/arp-1.png)   
- 交换机收到ARP协议，目标MAC地址为`FFFF.FFFF.FFFF` TYPE标记协议种类
![img](/img/blogarticles/networkaccess/arp-2.png)   
- 广播发送ARP协议，如图PC2将其丢弃，PC3为正确地址，并将自己MAC地址响应回客户端
![img](/img/blogarticles/networkaccess/arp-3.png)   
- 发送ICMP协议包 ping 通
![img](/img/blogarticles/networkaccess/arp-4.png)   

这里要来说明一个问题：  
既然IP与MAC一一对应为什么有IP还需要MAC地址？  
```
Mac地址在两个设备之间通信时在变化(路由器转发等)  
IP地址在整个通讯过程中都不会发生任何变化。
```
#### TTL 
　　经常在PING主机的时候会有一个TTL，指一个数据包在经过一个网络时，可传递的最长距离（跃点数）。每当数据包经过一个路由器时，其存活时间就会被减一。当其存活时间为0时，路由器便会取消数据包并发送一个ICMP TTL数据包给原数据包的发出者。其设计目的是防止数据包因不正确的路由表等原因造成的无限循环而无法送达及耗尽网络资源     --WIKI百科  
TTL简单来讲就是你距离目标服务器经过了（128-TTL）个路由器

## 路由器（Router）
　　这个本来应该放在网络设备的，但是按照学习的顺序还是放到ARP协议之后比较合适 。   
　　`路由器`⼜称⽹关设备（Gateway） 是⽤于连接多个逻辑上分开的⽹络，所谓逻辑⽹络是代表⼀个单独的⽹络或者⼀个⼦⽹。 当数据从⼀个⼦⽹传输到另⼀个⼦⽹时， 可通过路由器的路由功能来完成，用通俗的话来讲从一个房间走到另一个房间，必然要经过一扇门。同样，从一个网络向另一个网络发送信息，也必须经过一道“关口”，这道关口`有两个网卡，一张用来适配入口网段，另一张用来适配出口网段`。 
在使用路由器之前先了解一下网关的概念  
　　`网关(Gateway)`又称网间连接器、协议转换器。默认网关在网络层上以实现网络互连，是最复杂的网络互连设备，仅用于两个高层协议不同的网络互连。网关的结构也和路由器类似，不同的是互连层。网关既可以用于广域网互连，也可以用于局域网互连  -- WIKI百科。
**通常指的网关就是路由器的IP**  

## 环境说明
![img](/img/blogarticles/networkaccess/environment.png)   
右边SERVER2.10和DNS2.11为两台服务器，SERVER2.10在应用层只支持HTTP协议，DNS2.11为DNS服务器在应用层只支持DNS协议。
![img](/img/blogarticles/networkaccess/google.gif)   
整个过程最核心的部分如上图所示去掉了STP RTP DTP等其它协议干扰。  
#### 总结
- 先要解析出目标网站对应的IP地址
	- 需要知道默认网关的MAC，使用ARP协议获取默认网关的MAC地址
	- 组织数据发送给默认网关(ip是dns服务器ip，MAC地址是默认网关的地址)
	- 默认网关拥有转发数据的能力，将数据转发给路由
	- 路由根据自己的路由协议来选择一台合适的较快的路径，转发数据到目的网关
	- 目的网关（DNS服务器所在网关）把数据转发给dns服务器
	- Dns服务器查询解析目标网站对应IP原路返回给客户端
- 得到IP后发送3次握手并进行TCP链接
- 使用HTTP协议发送请求数据给web服务器
- Web服务器收到请求，通过查询自己的服务器得到相应的结果，原路返回给客户端
- 浏览器接收数据并完成渲染显示
- 浏览器关闭TCP链接，四次挥手

## TCP 
UDP自然不用多说，DNS协议传输就是基于UDP，这里还是重点说一下TCP的三次握手和四次挥手还有2MSL问题
先来对TCP的十种状态有个印象
![img](/img/blogarticles/networkaccess/ten.png)   
#### 三次握手 
相信大家都写过socket，java代码比较多这里就用python进行说明 
```
tcp_client_socket = socket(AF_INET, SOCK_STREAM)
server_addr = ("192.168.0.10",8899)
tcp_client_socket.connect(server_addr)
```
当客户端调用connect()方法时，其实底层帮我们与目标服务器通信并建立TCP连接，其中TCP连接需要进行三次握手协议，如上图访问google所示。在客户机和服务器之间建立正常的TCP网络连接时，客户机首先发出一个SYN消息，服务器使用SYN+ACK应答表示接收到了这个消息，最后客户机再以ACK消息响应。这样在客户机和服务器之间才能建立起可靠的TCP连接，数据才可以在客户机和服务器之间传递，由上述动图可知最后一次响应与数据包基本同时发送。
![img](/img/blogarticles/networkaccess/three.png)   

#### 四次挥手
当客户端或者服务器调用close()方法时需要进行四次挥手,发送的包以及状态如下图
![img](/img/blogarticles/networkaccess/four.png)   

#### 2MSL问题
2MSL即两倍的MSL（最大生存时间）， TCP的TIME_WAIT状态也称为2MSL等待状态，当TCP的⼀端发起主动关闭， 在发出最后⼀个ACK包后，即第3次挥手完成后发送了第四次挥手的ACK包后就进⼊了TIME_WAIT状态，必须在此状态上停留两倍的MSL时间，等待2MSL时间主要⽬的是怕最后⼀个 ACK包对⽅没收到，那么对⽅在超时后将重发第三次握⼿的FIN包，主动关闭端接到重发的FIN包后可以再发⼀个ACK应答包。
在TIME_WAIT状态 时两端的端⼝不能使⽤， 要等到2MSL时间结束才可继续使⽤。
当连接处于2MSL等待阶段时任何迟到的报⽂段都将被丢弃。
![img](/img/blogarticles/networkaccess/2msl.png)   
当服务端先关闭时调用close方法，首先发出FIN包，在经确认后进入TIME_WAIT状态，此时若重启服务端则会出现端口占用异常。这个问题可以通过设置属性来达到不等待2MSL时间。


--- 
> -- Neil 最后编辑于2017-09