---
layout:     post
title:      "大型网站技术架构(下)"
subtitle:   "科普向-大型网站技术架构笔记整理"
date:       2018-05-01 
header-img: "img/bg-specification.jpg"
catalog:    true
author:     "Neil"
tags:
    - 系统架构
    - Java
---  

## 写在前面的话  
　　本文为《大型网站技术架构-核心原理与案例分析》-李智慧一书的学习笔记，整理以方便后期查阅。书中内容为科普向，没有太深的知识点正如作者所说“网站架构并不难，真正能解决问题的技术一定是简单的”，本书浅显易懂，看完之后对整个互联网架构的发展历程及网站架构的方法和思维方式有一定认知。值得一读。详接上文[大型网站技术架构(上)](http://www.neilqin.info/2018/04/08/SoftwareArchitect01)



## 1 永无止境-可伸缩性架构
在不需要改变网站的软硬件设计，仅仅通过改变部署的服务器数量就可以扩大或者缩小网站的服务处理能力
#### 1.1 网站的可伸缩性设计
> 不同功能进行物理分离实现伸缩 

- 纵向分离  
	- 将业务处理流程上的不同部分分离部署，实现系统伸缩性。  
- 横向分离
	- 将不同的业务模块分离部署，实现系统伸缩性。  

> 单一功能通过集群规模实现伸缩`  

集群内的多台服务器部署相同服务，提供相同功能。
```	
当一头牛拉不动车的时候，不要去寻找一头更强壮的牛，而是用两头牛来拉车。
```  

#### 1.2 应用服务器集群的伸缩性设计  

|方式|原理|优点|缺点|实际|
|:-|:-|:-|:-|:-|
|HTTP重定向负载均衡|HTTP重定向服务器根据用户的HTTP请求计算一台真实Web服务器地址，将该地址写入HTTP重定向响应（状态码302）返回用户浏览器|简单|浏览器两次请求服务器才能完成一次访问；302状态码重定向可能使搜索引擎判断为SEO作弊，降低搜索排名。|不多见|
|DNS域名解析负载均衡|DNS服务器中配置多个A记录（如www.mysite.com IN A 114.100.80.1、www.mysite.com IN A 114.100.80.2、www.mysite.com IN A 114.100.80.3），每次域名解析请求都会根据负载均衡算法计算一个IP地址返回。|负载均衡交给DNS，省去维护负载均衡服务器的麻烦；DNS支持基于地理位置的解析，即解析距离用户最近的服务器地址|服务器下线时，更新DNS解析生效时间较长；DNS负载均衡控制权在域名服务商，无法对其更多改善和管理。|大型网站使用DNS解析作为第一级负载均衡，即解析得到的一组服务器是内部负载均衡服务器，再由内部负载均衡服务器分发到真是Web服务器|
|反向代理负载均衡|反向代理同时实现了缓存和负载均衡功能；Web服务器不使用外部IP地址，由反向代理服务器配置双网卡和内外两套IP地址|反向代理服务器功能集中，部署简单|反向代理服务器是所有请求的响应的中转站，性能可能成为瓶颈|非常常见|
|IP负载均衡|负载均衡服务器114.10.80.10在操作系统内核进程获取网络数据包，根据负载均衡算法计算得到一台Web服务器10.0.0.1，再将数据目的IP地址修改为10.0.0.1，无需用户进程处理；Web服务器10.0.0.1响应后，负载均衡服务器再将数据包源地址修改为自身IP地址114.10.80.10，发送给浏览器|在内核进程完成数据分发，较反向代理负载均衡（应用程序分发）性能更好|与反向代理负载均衡相同|-|
|数据链路层负载均衡|三角传输模式；直接路由方式（DR）；负载均衡服务器只在数据链路层修改目的MAC地址，配置真实物理服务器所有机器虚拟IP与负载均衡服务器IP地址一致，即可不修改数据包源地址和目的地址进行分发；真实物理服务器IP与数据请求目的IP一致，无需通过负载均衡服务器就可响应数据返回浏览器|避免负载均衡服务器成为瓶颈|不支持正则表达式处理，不能做动静分离|大型网站使用最广的负载均衡。Linux上最好的开源产品是LVS（Linux Virtual Server）|

> 负载均衡算法

1. `轮询`（Round Robin，RR）：所有请求依次分发到每台服务器，适合所有服务器硬件都相同的场景。
2. `加权轮询`（Weight Round Robin，WRR）：轮询基础上，按照配置的权重将请求分发到每台服务器，高性能的服务器分配更多请求。
3. `随机`（Random）：请求随机分发到每台服务器，也可加权随机。
4. `最少连接`（Least Connections）：记录每台服务器正在处理请求（连接）数，将新请求分发到最少连接服务器，最符合负载均衡定义，也可加权最少连接。
5. `源地址散列`（Source Hashing）：根据请求来源IP地址的Hash值，得到服务器，同一IP地址请求总在一台服务器上处理。

> 分布式缓存的一致性Hash算法
[提供一篇通俗易懂的文章](http://www.zsythink.net/archives/1182)  


## 2 随机应变-可扩展架构  
首先要分得清扩展性和伸缩性
1. 扩展性（Extensibility）：对现有系统影响最小的情况下，系统功能可持续扩展或提升的能力。
2. 伸缩性（Scalability）：系统能够通过增加（减少）自身资源规模的方式增强（减少）自己计算处理事务的能力。  

> 利用分布式消息队列降低系统耦合性  

强推《大型网站系统于Java中间件实践》
事件驱动架构（Event Driven Architecture）：通过在低耦合的模块之间传输事件消息，以保持模块的松散耦合，并借助事件消息的通信完成模块间合作。典型的EDA架构就是生产者消费者模式。大型网站最常见是分布式消息队列，利用发布/订阅模式工作。

> 利用分布式服务打造可服用的业务平台  

- 需要将超大型的、复杂系统查分成可独立部署的模块，从而降低耦合性
- Web Service与企业分布式服务
	- Web Service比较臃肿，可以考虑使用REST
	- 或者使用开源的解决方案，例如Dubbo/Facebook Thrift/Fiegn  

![img](/img/blogarticles/SoftwareArchitect/rpc.png)  

## 3 固若金汤-安全架构

对于网络安全方向暂时没有去了解，书中这部分内容没有详细阅读，后期学习时做专题阅读，再来详细讲述安全架构的前世今生。

## 4 案例
这里附上一个书中引用的案例-网购秒杀系统设计案例，从案例中快速消化本书内容  
 
  
首先我们先来了解一下秒杀活动所带来的技术挑战：
- 对现有网站业务造成冲击（如与原有应用一起部署，不然对现有业务造成冲击，有瘫痪风险）
- 高并发下的应用、数据负载（不停刷新，对应用服务器和数据库服务器造成极大负载压力）
- 突然增加的网络及服务贷款（超过网站平时使用带宽）
- 直接下单（下单页面也是一个普通URL，如果得到URL，不用等到秒杀开始就可以下单）

针对上述挑战，有如下应对策略  

|挑战|策略|描述|
|:-|:-|:-|
|业务冲击|秒杀系统独立部署|与网站隔离，独立域名|
|数据负载|秒杀页面静态化|所有内容静态化，不需要动态web服务器和数据库服务器|
|网络带宽|租借秒杀网络带宽|向运营商重新购买或租借带宽，并将页面缓存在CDN|
|下单URL|动态生成随机下单页面URL|URL加入由服务器生成随机数作为参数，秒杀开始时得到|

最终架构如下：
![img](/img/blogarticles/SoftwareArchitect/ms.png)  

- 下单表单尽可能简单
	- 购买数量只能是1不可修改，送货地址付款方式都使用默认，没有默认可不填允许提交后修改，只有第一个提交的订单发给订单子系统，其余只能看到秒杀结束页面。

- 控制秒杀商品页面购买按钮点亮  
	- 使用JavaScript脚本控制，在秒杀商品静态页面中加入一个JavaScript文件应用，该JavaScript文件中加入秒杀是否开始的标志和下单页面URL的随机参数，当秒杀开始的时候生成一个新的JavaScript文件被用户浏览器加载，控制秒杀商品页面的展示，这个JavaScript文件使用随机版本号，并且不被浏览器，CDN和反向代理服务器缓存。  

- 只允许第一个提交的订单被发送到订单子系统
	- 为了减轻下单页面服务器的负载压力，控制进下单页面入口，只有少数用户才能进入下单页面，其他用户直接进入秒杀结束界面。设下单服务器集群有10台服务器，每台服务器值接受最多10个下单请求

![img](/img/blogarticles/SoftwareArchitect/lc.png)  


本书作为复习提纲，对架构设计的大方向进行简要描述，将之前零散的知识串起来了是本书给我最大的收益，逐渐可以形成自己的认知体系，这至关重要，如果你也模棱两可，那么推荐阅读。

---   
--Neil 后记于2018.05