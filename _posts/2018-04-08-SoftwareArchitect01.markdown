---
layout:     post
title:      "大型网站技术架构(上)"
subtitle:   "科普向-大型网站技术架构笔记整理"
date:       2018-03-26 
header-img: "img/bg-specification.jpg"
catalog:    true
author:     "Neil"
tags:
    - 系统架构
    - Java
---  

## 写在前面的话  
　　本文为《大型网站技术架构-核心原理与案例分析》-李智慧一书的学习笔记，整理以方便后期查阅。书中内容为科普向，没有太深的知识点正如作者所说“网站架构并不难，真正能解决问题的技术一定是简单的”，本书浅显易懂，看完之后对整个互联网架构的发展历程及网站架构的方法和思维方式有一定认知。值得一读。

## 概述
#### 目录结构  

<iframe id="embed_dom" name="embed_dom" frameborder="0" style="display:block;width:700px; height:1000px;" src="https://www.processon.com/embed/mind/5aca3c6be4b04a5e961e54ac"></iframe>



## 1 架构演化
#### 1.1 大型网站的特点
- 高并发，大流量
- 高可用
- 海量数据
- 用户分布广泛，网络情况复杂
- 安全环境恶劣
- 需求快速变更，发布频繁
- 渐进式发展  

#### 1.2 架构演化发展历程
1. 初始阶段（多使用LAMP搭建，汇集各种免费开源软件及一台廉价服务器）
2. 应用服务和数据分离（独立数据库服务器）
3. 使用缓存（本地缓存/远程分布式缓存 -- 存在数据热点）

    | 类型        | 原理          | 优点  |缺点|
    | ---------- |:-------------:|:-----:|:-:|
    | 本地缓存|缓存在应用服务器|访问速度更快|受应用服务器内存限制|
    | 分布式缓存|部署大内存缓存服务器集群|理论上不受内存容量限制|--|

4. 使用应用服务器集群
5. 数据库读写分离（主从热备）
6. 使用反向代理（本地机房）和CDN（运营商机房）加速网络响应（基本原理都为缓存）  
7. 使用分布式文件系统和分布式数据库系统（分布式数据库是网站数据库拆分的最后手段、常用业务分库）  
8. 使用NoSQL和搜索引擎  
9. 业务拆分（使用分而治之的手段将整个网站业务分成不同的产品线 如：首页、商铺、订单等拆分）
10. 分布式服务（将共用的业务提取出来，独立部署，由可复用的业务连接数据库）  

#### 1.3 网站架构设计误区
- 一味追随大公司解决方案（淘宝就是这么搞的...)
- 为了技术而技术（追求时髦的新技术）
- 企图用技术解决所有问题（12306的业务架构优化） 

## 2 架构模式
#### 2.1 分层  
在横向方向对系统进行切分
![img](/img/blogarticles/SoftwareArchitect/layered.png)  
#### 2.2 分割
在纵向方向对系统进行切分，将不同的功能和服务分割开来，包装成高内聚低耦合的模块单元
#### 2.3 分布式
分层和分割的主要目的是为了切分后便于分布式部署，但是分布式服务必须通过网络，这可能会对性能造成比较严重的影响并且服务器越多，宕机的概率越大。
> 常用的分布式方案：  

- 分布式应用和服务器
- 分布式静态资源（静态资源独立分布式部署）
- 分布式数据和存储
- 分布式计算（包括搜索引擎的索引构建、数据仓库的数据分析统计等 Hadoop及MapReduce）
- 分布式配置、分布式锁、分布式文件系统  
  
#### 2.4 集群  
多台服务器部署相同应用构成一个集群，通过负载均衡设备共同对外提供服务。  
#### 2.5 缓存  
将数据放在距离计算最近的位置以加快处理速度
常见的有：
- CDN
- 反向代理
- 本地缓存
- 分布式缓存
使用缓存有两个前提条件，`一是数据访问热点不均匀`，`二是数据在某个时间段内有效`  
  
#### 2.6 异步  
业务之间的消息传递不是同步调用，而是将一个业务操作分成多个阶段，每个阶段之间通过共享数据的方法异步进行协作，使用一部消息队列还有如下特性
- 提高系统可用性（消费者宕机，数据会在消息队列中存储，整体表现无故障，回复后正常处理）
- 加快网站响应速度（先响应再处理）
- 高并发消峰

#### 2.7 冗余（数据备份，集群和安全性需求的必然结果）
#### 2.8 自动化
自动化发布、自动化代码管理、自动化测试、自动化安全监测、自动化部署、自动化监控、自动化报警、自动化失效转移、恢复、自动化分配资源

## 3 核心架构要素-高性能
#### 3.1 性能测试指标
- 响应时间（应用执行一个操作需要的时间，包括从发出请求开始到收到最后响应数据所需要的时间）[数据来源](https://people.eecs.berkeley.edu/~rcs/research/interactive_latency.html)  
  
![img](/img/blogarticles/SoftwareArchitect/latencyNumbers.png)    

- 并发数（系统能够同时处理的请求的数目，也反映了系统的负载特性）
- 吞吐量（单位时间内系统处理的请求数量，体现系统的整理处理能力）
- 性能计数器（描述服务器或者操作系统性能的一些数据指标）

#### 3.2 WEB前端优化  
> 浏览器优化  

1. 减少http请求（合并CSS,合并JavaScript，合并图片）
2. 使用浏览器缓存（静态资源）
3. 启用压缩（HTML/CSS/JavaScript 文件启用GZip压缩）
4. CSS放在页面最上面，JavaScript放在页面最下面
5. 减少Cookie传输  

> CDN加速  
> 反向代理 

#### 3.3 应用服务器优化  
> 分布式缓存 （网站性能优化第一定律-优先考虑使用缓存）  

- 缓存从本质上来说，就是一个内存hash表
- 缓存需要缓存那些读写比很高、很少变化的数据，一般来说读写比在2:1以上时，缓存才有意义
- 应用程序读取数据时，首先到缓存中读取，如果缓存不存在或者已失效，再访问数据库，同时将新的数据放入缓存
- 缓存也需要注意缓存热点数据（没有热点数据，不遵循二八定律，缓存就没有意义）
- 缓存预热，在新启动的缓存系统中，在启动时就加载热点数据，这样启动后就可以直接使用
- 缓存穿透（将不存在的数据也缓存起来，value值为null）， 应用持续大量访问不存在的数据，因为这类数据不存在于缓存中，因此会大量访问数据库，从而降低性能
- 对于分布式缓存来说，目前有两类：不同的缓存服务器之间进行通信，例如JBoss Cache；不同缓存服务器之间不进行通信，例如Memcached  

> 异步操作 （任何可以晚点做的事情都应该晚点再做）   

> 使用集群  

#### 3.4 代码优化
> 多线程    

启动线程数 = [任务执行时间/(任务执行时间-IO等待时间)]*CPU内核数  
最佳启动线程数和CPU内核数量成正比，和IO等待时间成正比。如果任务都是计算型任务，那么线程数不超过CPU内核数。
`线程安全主要解决手段`：
- 将对象设计为无状态对象(不存储状态信息，无成员变量或成员变量也是无状态对象)
- 使用局部对象
- 并发访问资源时使用锁

> 资源复用 （单例、对象池）  

> 数据结构   

> 垃圾回收  

#### 3.5 磁盘优化

#### 小结
网站性能优化的`主要工作是改善高并发用户访问下的网站响应速度`。  
  
两个网站性能架构设计方案：  
A. 在小于100个并发用户访问时，每个请求的响应时间是1秒，当并发请求达到200的时候请求响应时间将骤增10秒。  
B：不管100个并发用户访问还是200个并发用户访问，每个请求的响应时间都差不多是1.5秒  
BOSS期望的是在A方案的基础上，不管100个还是200个并发访问，响应时间都能达到1秒。而架构师能做到的是`利用分布式的方案改善网站并发特性，由于分布式不可避免会带来架构复杂，通讯延迟等问题`，所以最终方案可能是B方案。


## 4 核心架构要素-高可用  
#### 4.1 网站可用性度量     
```  
 网站不可用时间(故障时间) = 故障修复时间点 - 故障发现时间点  
 网站年度可用性指标 = （1 - 网站不可用时间/年度总时间）* 100%   
```  

|可用性(9)|可用性(百分比)|网站不可用时间|说明|
|:-|:-|:-|:-|
|2个9|99%|小于88小时|基本可用|
|3个9|99.9%|小于9小时|较高可用性|
|4个9|99.99%|小于53分钟|具备自动回复能力|
|5个9|99.999%|小于5分钟|极高可用性|

　　网站高可用架构的主要手段：数据和服务的冗余备份以及失效转移`，一旦服务器宕机，就将服务切换至其他可用的服务器上。

#### 4.2 高可用的网站架构  
1. 以百度为例
    - 应用层：文库、贴吧、百科等属不同产品，各自独立部署集群。
    - 服务层：应用层产品依赖共同的复用业务，这些业务服务各自部署集群。
    - 数据层：各自部署集群。
2. 实现高可用架构主要手段：数据和服务的`冗余备份`及`失效转移`。
3. 应用层高可用：通过负载均衡设备将一组服务器组成一个集群对外处理高并发请求，负载均衡设备通过`心跳检测等手段监控`到应用服务器不可用时，将其从集群列表剔除，请求分发到集群其他可用服务器上。
4. 服务层高可用：也是通过集群实现高可用。服务层被应用层通过分布式服务调用框架访问，分布式服务调用框架在应用层客户端中实现负载均衡，服务注册中心获取服务层服务器心跳检测，发现不可用服务器，立即通知客户端修改服务层访问列表，剔除不可用服务器（说的就是Dubbo）。
5. 数据层高可用：比较特殊，数据服务器存储了数据。数据写入时`同步复制`数据到多台服务器上，实现数据冗余备份；数据服务器宕机时，数据访问切换到备份数据服务器上。
6. 网站升级发布可能引起故障。  

#### 4.3 高可用的应用   
  
1. 通过`负载均衡`进行无状态服务失效转移
无状态应用： 应用服务器不保存业务的上下文信息，而仅根据每次请求提交的数据进行相应的业务逻辑处理，多个服务实例之间完全对等，请求提交到任何一个服务器上，处理的结构都是相同的
2. 应用服务器集群的Session管理
    - `Session复制`：集群各台服务器间同步Session对象，每台服务器都保存所有用户的Session信息。服务器内存无法保存大量Session，不适合大型网站。
    - `Session绑定`：利用负载均衡的源地址Hash算法，负载均衡服务器总是将源于同一IP的请求分发到同一服务器。服务器宕机Session丢失，无法高可用，不适合大型网站。
    - `利用Cookie记录Session`：Cookie大小限制；每次请求响应都传输Cookie，影响性能；用户关闭Cookie将不正常。Cookie简单易用，可用性高，支持应用服务器线性伸缩，许多网站或多或少都使用Cookie记录Session。
    - `Session服务器`：利用分布式缓存、数据库等存取Session，实现应用服务器的状态分离。可用性高、伸缩性好、性能不错，适合大型网站。  

#### 4.4 服务层高可用  
  
1. 分级管理
    - 核心应用和服务优先使用更好的硬件和更快的运维响应速度。
    - 部署隔离，避免故障连锁反应：低优先级服务启动不同线程或部署在不同虚拟机上隔离；高优先级服务部署在不同物理机上；核心服务和数据甚至部署在不同地域的数据中心。
2. 超时设置：在应用程序设置服务调用超时时间，超时后通信框架抛出异常，避免因服务器宕机、线程死锁导致应用程序对服务端调用失去响应，进而用户请求长时间得不到响应，同时占用应用程序资源。
3. 异步调用
4. 服务降级：有`两种手段`。
    - `拒绝服务`：拒绝低优先级应用的调用，减少并发数，确保核心应用正常调用；随机拒绝部分请求调用，让另一部分请求成功，避免大家一起死的餐具。
    - `关闭服务`：关闭部分不重要服务或服务内部关闭部分不重要功能，节约开销。
5. 幂等性设计：应用层只要未收到调用成功的响应，都认为调用服务失败，并重试服务调用，因此服务层必须保证服务重复调用和调用一次的结果相同，即`服务具有幂等性`。  

#### 4.5 数据层高可用（数据备份和失效转移） 
> CAP 原理  
  
1. 数据高可用含义。
    - `数据持久性`：在各种情况下都不会出现数据丢失问题。
    - `数据可访问性`：多数据副本分别存放在不同存储设备情况下，失效转移能很快完成（终端用户几乎没有感知）。
    - `数据一致性`：多数据副本情况下，各副本之间数据一致。  
2. CAP原理：一个提供数据服务的存储系统无法同时满足数据一致性（Consistency）、数据可用性（Availability）、分区容错性（Partition Tolerance）这三个条件。 
3. 大型网站实践：通常选择`强化分布式存储系统的可用性（A）和伸缩性（P），而在某种程度上放弃一致性（C）`。一般数据不一致出现在系统高并发写操作或集群状态不稳定（故障恢复、集群扩容等）时，应用系统要对分布式数据处理系统的数据不一致性有了解并进行某种意义上的补偿和纠错，以保证最终一致性。

> 数据备份 (冷备和热备)   
  
1. `冷备`（定期复制到某种存储介质）的优点是简单和廉价，成本和技术难度较低，缺点是不能保证数据最终一致
2. `热备`分为两种：
    - `异步热备`：多分数据副本的写入操作异步完成，应用程序收到数据服务系统操作成功响应时，只写成功一份，存储系统将会异步地写其他副本（这个过程有可能失败）
    - `同步热备`：多分数据副本写入操作同步完成，应用程序收到数据服务系统的写成功响应时，可能有部分副本或者全部副本都已经写入成功（因为网络或者系统故障，无法返回操作成功的响应）
3. 同步热备优化：应用程序客户端并发向多个存储服务器同时写入数据，所有写操作成功响应后，再通知应用程序成功。优点：存储服务器无主从之分，完全对等，便于管理维护；并发写操作意味着多份数据的总写操作延时是响应最慢的那台存储服务响应。

> 失效转移 (失效确认、访问转移、数据恢复)


1. 失效确认：有心跳检测和应用程序访问失败报告两种手段。对于后者，控制中心还要再一次发送心跳检测确认，以免错误判断服务器宕机。
2. 访问转移：将数据读写访问重新路由到其他服务器上。 
3. 数据恢复：数据副本数目已减少，必须将副本数目恢复到系统设定的值，否则再有宕机可能无法访问转移（所有副本服务器宕机）。 



--- 
--Neil 后记于2018.04

